{"version":3,"sources":["webpack:///./src/templates/posts-by-tag.js","webpack:///./src/components/post-list-item.js"],"names":["PostsByTagTemplate","render","siteTitle","this","props","data","site","siteMetadata","title","posts","allMarkdownRemark","edges","tag","pageContext","location","description","style","display","alignItems","height","marginLeft","marginTop","fontWeight","map","index","node","key","marginBottom","rhythm","React","Component","pageQuery","PostListItem","excerpt","slug","fields","frontmatter","tags","date","fontFamily","fontSize","boxShadow","color","to","className","i","dateParser","dangerouslySetInnerHTML","__html"],"mappings":"wNAUMA,E,gLACJC,OAAA,WACE,IAAMC,EAAYC,KAAKC,MAAMC,KAAKC,KAAKC,aAAaC,MAC9CC,EAAQN,KAAKC,MAAMC,KAAKK,kBAAkBC,MACxCC,EAAQT,KAAKC,MAAMS,YAAnBD,IAER,OACE,kBAAC,IAAD,CAAQE,SAAUX,KAAKC,MAAMU,SAAUN,MAAON,GAC5C,kBAAC,IAAD,CAAKM,MAAOI,EAAKG,YAAW,sBAAwBH,IACpD,wBACEI,MAAO,CACLC,QAAS,OACTC,WAAY,WAHhB,cAOE,kBAAC,IAAD,CACEF,MAAO,CACLG,OAAQ,OACRC,WAAY,OACZC,UAAW,MACXC,WAAY,OAEdV,IAAKA,KAGRH,EAAMc,KAAI,WAAWC,GAAX,IAAGC,EAAH,EAAGA,KAAH,OACT,kBAAC,IAAD,CAAcC,IAAKF,EAAOC,KAAMA,OAElC,wBACET,MAAO,CACLW,aAAcC,YAAO,MAGzB,kBAAC,IAAD,CAAKZ,MAAO,CAAEW,aAAc,W,GAlCHE,IAAMC,WAwCxB9B,YAER,IAAM+B,EAAS,a,iCCpDtB,sDAoDeC,IA5CM,SAAC,GAAc,IAAZP,EAAW,EAAXA,KACdQ,EAAYR,EAAZQ,QACAC,EAAST,EAAKU,OAAdD,KAFyB,EAGGT,EAAKW,YAAjCC,EAHyB,EAGzBA,KAAMC,EAHmB,EAGnBA,KAAMvB,EAHa,EAGbA,YACdP,EAAQiB,EAAKW,YAAY5B,OAASiB,EAAKU,OAAOD,KACpD,OACE,yBAAKR,IAAKQ,GACR,wBACElB,MAAO,CACLuB,WAAY,yBACZC,SAAU,UACVb,aAAcC,YAAO,OAGvB,kBAAC,OAAD,CAAMZ,MAAO,CAAEyB,UAAU,OAASC,MAAO,WAAaC,GAAIT,GACvD1B,IAGJ6B,EACC,yBAAKO,UAAU,kBACZP,EAAKd,KAAI,SAACX,EAAKiC,GAAN,OACR,kBAAC,IAAD,CAAKjC,IAAKA,EAAKc,IAAKmB,QAGtB,KACJ,2BACE7B,MAAO,CACL0B,MAAO,YAGRI,YAAWR,IAEd,uBACEtB,MAAO,CACL0B,MAAO,WAETK,wBAAyB,CACvBC,OAAQjC,GAAekB","file":"component---src-templates-posts-by-tag-js-5aec5957456809254679.js","sourcesContent":["import React from 'react'\nimport { graphql } from 'gatsby'\n\nimport Bio from '../components/bio'\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\nimport Tag from '../components/tag'\nimport { rhythm } from '../utils/typography'\nimport PostListItem from '../components/post-list-item'\n\nclass PostsByTagTemplate extends React.Component {\n  render() {\n    const siteTitle = this.props.data.site.siteMetadata.title\n    const posts = this.props.data.allMarkdownRemark.edges\n    const { tag } = this.props.pageContext\n\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO title={tag} description={`posts para el tag: ${tag}`} />\n        <h1\n          style={{\n            display: 'flex',\n            alignItems: 'center',\n          }}\n        >\n          Posts sobre\n          <Tag\n            style={{\n              height: '25px',\n              marginLeft: '15px',\n              marginTop: '6px',\n              fontWeight: '500',\n            }}\n            tag={tag}\n          />\n        </h1>\n        {posts.map(({ node }, index) => (\n          <PostListItem key={index} node={node} />\n        ))}\n        <hr\n          style={{\n            marginBottom: rhythm(1),\n          }}\n        />\n        <Bio style={{ marginBottom: '0px' }} />\n      </Layout>\n    )\n  }\n}\n\nexport default PostsByTagTemplate\n\nexport const pageQuery = graphql`\n  query PostsByTag($tag: String!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            tags\n            title\n            date(formatString: \"DD-MM-YYYY\")\n            description\n          }\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { Link } from 'gatsby'\n\nimport { rhythm } from '../utils/typography'\nimport { dateParser } from '../utils/dateParser'\n\nimport Tag from '../components/tag'\n\nconst PostListItem = ({ node }) => {\n  const { excerpt } = node\n  const { slug } = node.fields\n  const { tags, date, description } = node.frontmatter\n  const title = node.frontmatter.title || node.fields.slug\n  return (\n    <div key={slug}>\n      <h3\n        style={{\n          fontFamily: 'Montserrat, sans-serif',\n          fontSize: '1.75rem',\n          marginBottom: rhythm(1 / 4),\n        }}\n      >\n        <Link style={{ boxShadow: `none`, color: '#2b2b2b' }} to={slug}>\n          {title}\n        </Link>\n      </h3>\n      {tags ? (\n        <div className=\"tags-container\">\n          {tags.map((tag, i) => (\n            <Tag tag={tag} key={i} />\n          ))}\n        </div>\n      ) : null}\n      <small\n        style={{\n          color: '#929292',\n        }}\n      >\n        {dateParser(date)}\n      </small>\n      <p\n        style={{\n          color: '#929292',\n        }}\n        dangerouslySetInnerHTML={{\n          __html: description || excerpt,\n        }}\n      />\n    </div>\n  )\n}\n\nexport default PostListItem\n"],"sourceRoot":""}