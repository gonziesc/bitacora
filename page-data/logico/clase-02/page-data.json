{"componentChunkName":"component---src-templates-blog-post-js","path":"/logico/clase-02/","webpackCompilationHash":"d215d268f6db5973917f","result":{"data":{"site":{"siteMetadata":{"title":"Bitácora","author":"pdep"}},"markdownRemark":{"id":"e8f84774-6959-5b7f-b817-8e60c6b2233f","excerpt":"Tarea para la clase que viene: Hacer hasta la lección 7 (inclusive) de Mumuki. Empezar con el TP grupal. Negación Hasta ahora venimos definiendo predicados que…","html":"<h2 id=\"tarea-para-la-clase-que-viene\"><a href=\"#tarea-para-la-clase-que-viene\" aria-label=\"tarea para la clase que viene permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tarea para la clase que viene:</h2>\n<ul>\n<li>Hacer hasta la lección 7 (inclusive) de <a href=\"https://mumuki.io/pdep-utn/chapters/307-programacion-logica\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mumuki</a>.</li>\n<li>Empezar con el TP grupal.</li>\n</ul>\n<h2 id=\"negación\"><a href=\"#negaci%C3%B3n\" aria-label=\"negación permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Negación</h2>\n<p>Hasta ahora venimos definiendo predicados que trabajan con individuos. ¿Y qué pasa si queremos definir el predicado <code class=\"language-text\">noEsComic/1</code>? (Que nos dice si una lectura no es un cómic, por si no era obvio 😜). Lo haríamos de esta forma:</p>\n<div class=\"gatsby-highlight\" data-language=\"prolog\"><pre class=\"language-prolog\"><code class=\"language-prolog\"><span class=\"token function\">noEsComic</span><span class=\"token punctuation\">(</span><span class=\"token variable\">UnaLectura</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:-</span>\n  <span class=\"token function\">not</span><span class=\"token punctuation\">(</span><span class=\"token function\">esComic</span><span class=\"token punctuation\">(</span><span class=\"token variable\">UnaLectura</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">.</span></code></pre></div>\n<p>Un momento ✋ ¿<code class=\"language-text\">not</code>? ¿Acá también? 😮 Sí, pero como habrás notado recibe como argumento otro predicado. ¿Te suena conocido? ¡Exacto! Es un predicado de <strong>orden superior</strong>, es decir, que va a recibir un predicado y nos responderá la negación de la respuesta de este. 😌</p>\n<p>Veamos algunos ejemplos de cómo funciona con las siguientes consultas:</p>\n<div class=\"gatsby-highlight\" data-language=\"prolog\"><pre class=\"language-prolog\"><code class=\"language-prolog\"><span class=\"token operator\">?-</span> <span class=\"token function\">noEsComic</span><span class=\"token punctuation\">(</span>watchmen<span class=\"token punctuation\">)</span><span class=\"token operator\">.</span>\nfalse\n\n<span class=\"token operator\">?-</span> <span class=\"token function\">noEsComic</span><span class=\"token punctuation\">(</span>fundacion<span class=\"token punctuation\">)</span><span class=\"token operator\">.</span>\ntrue</code></pre></div>\n<p>¿Qué pasa si intentamos hacer una consulta con una variable anónima? 🤔 ¡Veamos!</p>\n<div class=\"gatsby-highlight\" data-language=\"prolog\"><pre class=\"language-prolog\"><code class=\"language-prolog\"><span class=\"token operator\">?-</span> <span class=\"token function\">noEsComic</span><span class=\"token punctuation\">(</span><span class=\"token variable\">_</span><span class=\"token punctuation\">)</span>\nfalse</code></pre></div>\n<p>¿Falso? Sí, porque recordemos que al hacer una consulta con una variable anónima estamos preguntando si existe un átomo (o número) que satisfaga como verdadera a la consulta.</p>\n<p>Pero, ¿no es que hay consultas que responden verdadero a <code class=\"language-text\">not(esComic(Lectura))</code>? 😱\nSi, pero <code class=\"language-text\">noEsComic/1</code> se satisface si <code class=\"language-text\">not(esComic(Lectura))</code> es verdadero. Entonces podemos deducir mediante unas consultas que:</p>\n<div class=\"gatsby-highlight\" data-language=\"prolog\"><pre class=\"language-prolog\"><code class=\"language-prolog\"><span class=\"token operator\">?-</span> <span class=\"token function\">esComic</span><span class=\"token punctuation\">(</span><span class=\"token variable\">_</span><span class=\"token punctuation\">)</span>\ntrue\n<span class=\"token comment\">%% Quiere decir que existe al menos una lectura que es comic, entonces:</span>\n\n<span class=\"token operator\">?-</span> <span class=\"token function\">not</span><span class=\"token punctuation\">(</span><span class=\"token function\">esComic</span><span class=\"token punctuation\">(</span><span class=\"token variable\">_</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nfalse\n<span class=\"token comment\">%% Estamos negando la consulta anterior, por lo tanto nos da false.</span></code></pre></div>\n<p>Por lo tanto, al hacer <code class=\"language-text\">noEsComic(_)</code>, estamos preguntando si no existe ninguna lectura que sea comic y eso nos da <code class=\"language-text\">false</code> ya que sí existen.</p>\n<h2 id=\"unificación-vs-asignación\"><a href=\"#unificaci%C3%B3n-vs-asignaci%C3%B3n\" aria-label=\"unificación vs asignación permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Unificación vs Asignación</h2>\n<p>La <em>asignación</em> (en este caso, para que sea más claro, la asignación destructiva) ocurre cuando se puede reemplazar el valor de una variable por otro valor. En funcional este concepto no existía y en Prolog, ¡tampoco! Lo que vamos a tener en este paradigma es la <em>unificación</em>.</p>\n<p>¿Ehhh? 😵 Unificar es encontrar una sustitución capaz de igualar dos términos.\nPor ejemplo, si hago la consulta:</p>\n<div class=\"gatsby-highlight\" data-language=\"prolog\"><pre class=\"language-prolog\"><code class=\"language-prolog\"><span class=\"token operator\">?-</span> <span class=\"token function\">escribio</span><span class=\"token punctuation\">(</span><span class=\"token variable\">X</span><span class=\"token punctuation\">,</span> sandman<span class=\"token punctuation\">)</span>\n<span class=\"token variable\">X</span> <span class=\"token operator\">=</span> neilGaiman</code></pre></div>\n<p>Lo que hace Prolog es buscar un consecuente, dentro de todas las cláusulas de nuestra base de conocimiento, que “unifique” con nuestra consulta.</p>\n<h2 id=\"inversibilidad\"><a href=\"#inversibilidad\" aria-label=\"inversibilidad permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Inversibilidad</h2>\n<p>¿Esa palabra existe? No 😅. Pero decimos que un predicado es <em>inversible con respecto a un parámetro</em> si admite hacer consultas individuales o existenciales sobre ese parámetro.\nAdemás, un predicado es <strong>totalmente inversible</strong> si es inversible para todos sus parámetros.</p>\n<p>Volviendo al predicado <code class=\"language-text\">noEsComic/1</code>, ¿qué pasa si intentamos hacer la siguiente consulta?</p>\n<div class=\"gatsby-highlight\" data-language=\"prolog\"><pre class=\"language-prolog\"><code class=\"language-prolog\"><span class=\"token operator\">?-</span> <span class=\"token function\">noEsComic</span><span class=\"token punctuation\">(</span><span class=\"token variable\">X</span><span class=\"token punctuation\">)</span>\nfalse</code></pre></div>\n<p>Pero esperá, ¿no era que si consultábamos con una variable, nos tendría que responder todas las consultas las cuales hagan verdadero al predicado? 🤔</p>\n<p>Sí, pero como acabamos de ver, al preguntar <code class=\"language-text\">noEsComic(_)</code> nos retornaba false, indicando que “no existían consultas que hagan verdadero a ese predicado”, por lo tanto si consultamos con una variable, como no existen, retornara tambien false. 😌</p>\n<p>¡Pero ya vimos que hay consultas verdaderas! ¿¿¿QUÉ PASA??? 😨</p>\n<p>Oye, tranquilo viejo. Interpretemos lo que está pasando:\n<code class=\"language-text\">noEsComic/1</code> nos responde si una lectura que no es cómic. Ahora, si vemos como está armado el predicado, veremos que hay una falla importante: la variable <code class=\"language-text\">UnaLectura</code> puede ser cualquier cosa, no necesariamente una lectura, y responderá verdadero. Por ejemplo:</p>\n<div class=\"gatsby-highlight\" data-language=\"prolog\"><pre class=\"language-prolog\"><code class=\"language-prolog\"><span class=\"token operator\">?-</span> <span class=\"token function\">noEsComic</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token operator\">.</span>\ntrue\n\n<span class=\"token operator\">?-</span> <span class=\"token function\">noEsComic</span><span class=\"token punctuation\">(</span>soyCualquierCosaMenosUnaLectura<span class=\"token punctuation\">)</span><span class=\"token operator\">.</span>\ntrue</code></pre></div>\n<p>Podemos ver que hay infinitas respuestas verdaderas para el predicado. Por eso Prolog no nos deja hacer una consulta con una variable: no sabe cuáles responderán verdadero, ya que son infinitas.\n¿Y cómo solucionamos esto? 😬 Haciendo inversible el predicado. Es decir, ligar (unificar) nuestra variable a un predicado de la base de conocimiento que nos permita “generar” el universo con el que estamos trabajando.</p>\n<div class=\"gatsby-highlight\" data-language=\"prolog\"><pre class=\"language-prolog\"><code class=\"language-prolog\"><span class=\"token comment\">%% vamos a suponer que algo es una lectura si la escribió alguien %%</span>\n<span class=\"token function\">esLectura</span><span class=\"token punctuation\">(</span><span class=\"token variable\">UnaLectura</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:-</span>\n\t<span class=\"token function\">escribio</span><span class=\"token punctuation\">(</span><span class=\"token variable\">_</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">UnaLectura</span><span class=\"token punctuation\">)</span><span class=\"token operator\">.</span>\n\n<span class=\"token function\">noEsComic</span><span class=\"token punctuation\">(</span><span class=\"token variable\">UnaLectura</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:-</span>\n<span class=\"token function\">esLectura</span><span class=\"token punctuation\">(</span><span class=\"token variable\">UnaLectura</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token function\">not</span><span class=\"token punctuation\">(</span><span class=\"token function\">esComic</span><span class=\"token punctuation\">(</span><span class=\"token variable\">UnaLectura</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">.</span></code></pre></div>\n<p>Entonces, ¿qué cosas pueden convertir a un predicado en NO inversible?</p>\n<ul>\n<li>Comparaciones ( <code class=\"language-text\">\\=</code>, <code class=\"language-text\">&lt;</code>, <code class=\"language-text\">=&lt;</code>, <code class=\"language-text\">&gt;=</code>, <code class=\"language-text\">&gt;</code> )</li>\n<li><code class=\"language-text\">not</code></li>\n<li>forall</li>\n</ul>\n<h2 id=\"forall\"><a href=\"#forall\" aria-label=\"forall permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Forall</h2>\n<p>Hasta ahora, estuvimos trabajando con <strong>cuantificadores existenciales</strong>, es decir, todas nuestras consultas eran del tipo:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">∃x / p(x) =&gt; q(x)</code></pre></div>\n<p>Pero, sabemos que hay otro cuantificador, el <em>universal</em>. ¿Y cómo podemos trabajar con este cuantificador? 👀</p>\n<p>Vamos a utilizar el predicado de orden superior <code class=\"language-text\">forall/2</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"prolog\"><pre class=\"language-prolog\"><code class=\"language-prolog\"><span class=\"token function\">forall</span><span class=\"token punctuation\">(</span>antecedente<span class=\"token punctuation\">,</span> consecuente<span class=\"token punctuation\">)</span><span class=\"token operator\">.</span></code></pre></div>\n<p>Para que el <code class=\"language-text\">forall</code> responda verdadero, tiene que ocurrir que <strong>para todo antecedente que ocurra, su consecuente ocurre</strong>.</p>\n<p>Por ejemplo, al definir el predicado <code class=\"language-text\">soloEscribioComics/1</code> nos responde si todas las lecturas que alguien escribió son cómics.</p>\n<div class=\"gatsby-highlight\" data-language=\"prolog\"><pre class=\"language-prolog\"><code class=\"language-prolog\"><span class=\"token function\">soloEscribioComics</span><span class=\"token punctuation\">(</span><span class=\"token variable\">Autore</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:-</span>\n    <span class=\"token comment\">%% Primero, hay que generar a la autora o autor! %%</span>\n    <span class=\"token function\">escribio</span><span class=\"token punctuation\">(</span><span class=\"token variable\">Autore</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">_</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">%% Y realizamos el forall %%</span>\n    <span class=\"token function\">forall</span><span class=\"token punctuation\">(</span><span class=\"token function\">escribio</span><span class=\"token punctuation\">(</span><span class=\"token variable\">Autore</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">Lectura</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">esComic</span><span class=\"token punctuation\">(</span><span class=\"token variable\">Lectura</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">.</span></code></pre></div>\n<h2 id=\"links-útiles\"><a href=\"#links-%C3%BAtiles\" aria-label=\"links útiles permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Links útiles:</h2>\n<ul>\n<li><a href=\"http://wiki.uqbar.org/wiki/articles/paradigma-logico---negacion.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Negación</a></li>\n<li><a href=\"http://wiki.uqbar.org/wiki/articles/unificacion-y-pattern-matching.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Unificación vs asignación</a></li>\n<li><a href=\"http://wiki.uqbar.org/wiki/articles/paradigma-logico---inversibilidad.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Inversibilidad</a></li>\n<li><a href=\"http://wiki.uqbar.org/wiki/articles/paradigma-logico---generacion.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Generación</a></li>\n<li><a href=\"http://wiki.uqbar.org/wiki/articles/paradigma-logico---existe-vs-para-todo.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Forall</a></li>\n</ul>","frontmatter":{"title":"Novena clase","date":"27-05-2019","description":"Negación, unificación vs asignación, inversibilidad, forall","tags":["logico","negacion","unificacion","inversibilidad","forall"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/logico/clase-02/","previous":{"fields":{"slug":"/logico/clase-01/"},"frontmatter":{"title":"Octava clase"}},"next":{"fields":{"slug":"/logico/clase-03/"},"frontmatter":{"title":"Décima clase"}}}}}