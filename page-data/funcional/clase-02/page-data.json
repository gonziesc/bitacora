{"componentChunkName":"component---src-templates-blog-post-js","path":"/funcional/clase-02/","webpackCompilationHash":"3f169e9d242527118aec","result":{"data":{"site":{"siteMetadata":{"title":"Bitácora","author":"pdep"}},"markdownRemark":{"id":"b95dab4a-5bd3-5fb3-9763-9b1c1cd6dd04","excerpt":"Tarea para la clase que viene ¡Hacer parejas para los trabajos practicos que ya se vienen! 🙆‍♀️🙆‍♂️ Hacer las lecciones 1 a 4 (inclusive) del capítulo 1 de…","html":"<h2 id=\"tarea-para-la-clase-que-viene\"><a href=\"#tarea-para-la-clase-que-viene\" aria-label=\"tarea para la clase que viene permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tarea para la clase que viene</h2>\n<ul>\n<li><strong>¡Hacer parejas para los trabajos practicos que ya se vienen!</strong> 🙆‍♀️🙆‍♂️</li>\n<li><strong>Hacer las lecciones 1 a 4 (inclusive) del capítulo 1 de <a href=\"https://mumuki.io/pdep-utn\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mumuki</a></strong></li>\n</ul>\n<h2 id=\"¿qué-empezamos-viendo-hoy\"><a href=\"#%C2%BFqu%C3%A9-empezamos-viendo-hoy\" aria-label=\"¿qué empezamos viendo hoy permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>¿Qué empezamos viendo hoy?</h2>\n<p>Repasamos lo que vimos la clase pasada (los conceptos de <strong>declaratividad</strong> y <strong>expresividad</strong>, <strong>abstraccion</strong>, <strong>delegacion</strong>), y arrancamos con el paradigma <strong>funcional</strong> y Haskell. 😎</p>\n<h2 id=\"¿qué-es-el-paradigma-funcional\"><a href=\"#%C2%BFqu%C3%A9-es-el-paradigma-funcional\" aria-label=\"¿qué es el paradigma funcional permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>¿Qué es el paradigma funcional?</h2>\n<p>En el paradigma funcional veremos y trabajaremos, justamente, con el concepto de <strong><em>funciones</em></strong> 😅. Y como las funciones de análisis matemático, las funciones tienen dos propiedades importantes: <strong>existencia</strong> y <strong>unicidad</strong>. Estas propiedades también se respetan en Haskell. 😮</p>\n<h2 id=\"valores-y-funciones\"><a href=\"#valores-y-funciones\" aria-label=\"valores y funciones permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Valores y Funciones</h2>\n<p>En Haskell, podemos definir valores, como también funciones:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">billetera</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n<span class=\"token comment\">-- Los valores pueden ser booleanos, enteros, strings, etc.</span>\n\n<span class=\"token hvariable\">comprarAgua</span> <span class=\"token hvariable\">unaBilletera</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">unaBilletera</span> <span class=\"token operator\">-</span> <span class=\"token number\">30</span></code></pre></div>\n<p>Las funciones van a ser nuestra herramienta para poder operar sobre los valores. Por ejemplo:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token operator\">></span> <span class=\"token hvariable\">comprarAgua</span> <span class=\"token hvariable\">billetera</span>\n<span class=\"token operator\">=></span> <span class=\"token number\">70</span></code></pre></div>\n<p>Algo muy importante es que en Haskell <strong>no hay efecto</strong>. Esto quiere decir que los valores igualados no van a mutar luego de ser operados por las funciones. Este concepto se llama <strong><em>inmutabilidad</em></strong>.</p>\n<p>Por ejemplo, si aplicamos <code class=\"language-text\">comprarAgua</code> a <code class=\"language-text\">billetera</code>, podemos ver que <code class=\"language-text\">billetera</code> no cambia su valor:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token operator\">></span> <span class=\"token hvariable\">billetera</span>\n<span class=\"token operator\">=></span> <span class=\"token number\">100</span>\n<span class=\"token operator\">></span> <span class=\"token hvariable\">comprarAgua</span> <span class=\"token hvariable\">billetera</span>\n<span class=\"token operator\">=></span> <span class=\"token number\">70</span>\n<span class=\"token operator\">></span> <span class=\"token hvariable\">billetera</span>\n<span class=\"token operator\">=></span> <span class=\"token number\">100</span></code></pre></div>\n<p>Por esto, es que en Haskell logramos tener lo que se llama <strong>transparencia referencial</strong>.</p>\n<h2 id=\"composición\"><a href=\"#composici%C3%B3n\" aria-label=\"composición permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Composición</h2>\n<p>Supongamos que tenemos la función <code class=\"language-text\">ganarLotería</code> que, dado un monto en una billetera, le suma 1000:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">ganarLoteria</span> <span class=\"token hvariable\">unaBilletera</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">unaBilletera</span> <span class=\"token operator\">+</span> <span class=\"token number\">1000</span></code></pre></div>\n<p>Ahora, queremos ganar la lotería y comprar un agua. ¿Cómo lo hacemos? 😱 ¡Componiendo las funciones! 💪</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">comprarAgua</span><span class=\"token punctuation\">.</span><span class=\"token hvariable\">ganarLoteria</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">billetera</span>\n<span class=\"token operator\">=></span> <span class=\"token number\">1070</span></code></pre></div>\n<p>¿Qué lo qué está pasando? 😱 Lo mismo que con la composición de funciones matemáticas ( <em>FoG(x)</em> )  🤓. Primero se aplica la función de la <em>derecha</em> con el valor y luego se aplica la de la <em>izquierda</em> con el valor que nos devolvió la función anterior.</p>\n<p>Recordemos que, como en matemática, el valor que retorne la función de la derecha, tiene que ser <strong>un valor que la función de la izquierda pueda operar</strong>. Es decir, que la imágen de la función de la derecha esté incluída en el dominio de la función de la izquierda.</p>\n<p>Por ejemplo, si tenemos esta nueva función:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">esRico</span> <span class=\"token hvariable\">unaBilletera</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">unaBilletera</span> <span class=\"token operator\">></span> <span class=\"token number\">1000</span></code></pre></div>\n<p>y la intento componer así:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">ganarLoteria</span><span class=\"token punctuation\">.</span><span class=\"token hvariable\">esRico</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">billetera</span></code></pre></div>\n<p>Va a romper 💥 ya que <code class=\"language-text\">ganarLoteria</code> tiene que recibir un número, y esta recibiendo un booleano.</p>\n<p>La version correcta seria asi: 👍</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">esRico</span><span class=\"token punctuation\">.</span><span class=\"token hvariable\">ganarLoteria</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">billetera</span></code></pre></div>\n<p>Lo que nos queda después de componer dos funciones es… ¡una <strong>nueva funcion</strong>! 😮</p>\n<p>Tambien podemos definirlas:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">ganarLoteriaYComprarAgua</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">comprarAgua</span><span class=\"token punctuation\">.</span><span class=\"token hvariable\">ganarLoteria</span>\n<span class=\"token comment\">-- Con la notacion point-free podemos ignorar parámetros cuando las funciones de la derecha del igual esperan ese mismo parámetro y el mismo está lo más a la derecha posible, en este caso sería el parámetro billetera.</span></code></pre></div>\n<h2 id=\"precedencia-de-operadores\"><a href=\"#precedencia-de-operadores\" aria-label=\"precedencia de operadores permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Precedencia de Operadores</h2>\n<p>En matemática, cuando tenemos una expresión como 2 * 3 + 4, solemos operarla dependiendo de la precedencia de cada operador. Como el * es de mayor precedencia que el +, operamos primero 2 * 3 y luego le sumamos 4.</p>\n<p>En Haskell también se respeta esto. Les dejamos una tabla para que puedan ver la precedencia que utiliza Haskell:</p>\n<table>\n<thead>\n<tr>\n<th>Precedencia (Mayor numero, mayor precedencia)</th>\n<th align=\"center\">“Operador”</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>10</td>\n<td align=\"center\">Aplicacion Normal de una Funcion</td>\n</tr>\n<tr>\n<td>9</td>\n<td align=\"center\">.</td>\n</tr>\n<tr>\n<td>8</td>\n<td align=\"center\">^</td>\n</tr>\n<tr>\n<td>7</td>\n<td align=\"center\">*,/</td>\n</tr>\n<tr>\n<td>6</td>\n<td align=\"center\">+,-</td>\n</tr>\n<tr>\n<td>5</td>\n<td align=\"center\">:</td>\n</tr>\n<tr>\n<td>4</td>\n<td align=\"center\">==, /=, &#x3C;, &#x3C;=, >, >=</td>\n</tr>\n<tr>\n<td>3</td>\n<td align=\"center\">&#x26;&#x26;</td>\n</tr>\n<tr>\n<td>2</td>\n<td align=\"center\">||</td>\n</tr>\n<tr>\n<td>1</td>\n<td align=\"center\">$</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"tipado\"><a href=\"#tipado\" aria-label=\"tipado permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tipado</h2>\n<p>Un <strong>tipo</strong> es un conjunto de valores, a los cuales uno puede operar con un conjunto de funciones, mientras ellas los entiendan. Se puede pensar como en las funciones matemáticas y los dominios de una función.</p>\n<p>Por ejemplo, los tipos de las funciones que utilizamos anteriormente serían:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">billetera</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Int</span>\n\n<span class=\"token hvariable\">comprarAgua</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Int</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Int</span>\n\n\n<span class=\"token hvariable\">ganarLoteria</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Int</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Int</span>\n\n<span class=\"token hvariable\">esRico</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Int</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span></code></pre></div>\n<p><strong>¿Para qué nos sirve tipar?</strong></p>\n<p>Nos sirve para que, solo mirando el tipado de una función y el nombre de ésta (si es bien expresiva 😝), podamos inferir que es lo que la función hace. También, es una gran forma de validar que lo que estamos pensando está bien. (Además, en el examen vamos a pedir que tipen las funciones, asi que ¡a practicar los tipos de las funciones!).</p>\n<h4 id=\"algunas-funciones-que-vimos-en-clase\"><a href=\"#algunas-funciones-que-vimos-en-clase\" aria-label=\"algunas funciones que vimos en clase permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Algunas funciones que vimos en clase:</h4>\n<ul>\n<li><code class=\"language-text\">even</code>: Dado un numero, devuelve si este es par</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token operator\">></span> <span class=\"token builtin\">even</span> <span class=\"token number\">2</span>\n<span class=\"token operator\">=></span> <span class=\"token constant\">True</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">odd</code>: Dado un numero, devuelve si este es impar</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token operator\">></span> <span class=\"token builtin\">odd</span> <span class=\"token number\">2</span>\n<span class=\"token operator\">=></span> <span class=\"token constant\">False</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">id</code>: Dado un valor, devuelve ese mismo valor</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token operator\">></span> <span class=\"token builtin\">id</span> <span class=\"token string\">\"Hola!\"</span>\n\n<span class=\"token operator\">=></span> <span class=\"token string\">\"Hola!\"</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">(\\$)</code>: Dada una funcion y un valor, devuelve el valor que es la aplicacion de la funcion al valor</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token operator\">></span> <span class=\"token builtin\">even</span> <span class=\"token operator\">$</span> <span class=\"token number\">2</span>\n\n<span class=\"token operator\">=></span> <span class=\"token constant\">True</span></code></pre></div>\n<p>Sirve mucho para deshacernos de paréntesis. Por ejemplo, para las composiciones:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">comprarAgua</span><span class=\"token punctuation\">.</span><span class=\"token hvariable\">ganarLoteria</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">billetera</span>\n<span class=\"token comment\">-- es equivalente hacer</span>\n<span class=\"token operator\">></span> <span class=\"token hvariable\">comprarAgua</span><span class=\"token punctuation\">.</span><span class=\"token hvariable\">ganarLoteria</span> <span class=\"token operator\">$</span> <span class=\"token hvariable\">billetera</span></code></pre></div>\n<p>Esto ocurre gracias a la precedencia del $. 🎉</p>\n<h2 id=\"links-útiles\"><a href=\"#links-%C3%BAtiles\" aria-label=\"links útiles permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Links Útiles</h2>\n<ul>\n<li><a href=\"http://wiki.uqbar.org/wiki/articles/concepto-de-funcion.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Concepto de función</a></li>\n<li><a href=\"http://wiki.uqbar.org/wiki/articles/composicion.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Composición</a></li>\n</ul>","frontmatter":{"title":"Segunda clase","date":"25-03-2019","description":"Introducción a Funcional. Composición, Precedencia de Operadores, primera parte de Tipado.","tags":["funcional","composicion","tipado","precedencia-de-operadores","inmutabilidad"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/funcional/clase-02/","previous":{"fields":{"slug":"/funcional/clase-01/"},"frontmatter":{"title":"Primera clase"}},"next":{"fields":{"slug":"/funcional/clase-03/"},"frontmatter":{"title":"Tercera clase"}}}}}