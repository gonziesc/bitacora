<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Bit√°cora]]></title><description><![CDATA[Bit√°cora con resumenes clase a clase]]></description><link>https://pdep-lunes.github.io/bitacora</link><generator>GatsbyJS</generator><lastBuildDate>Fri, 10 Apr 2020 00:54:12 GMT</lastBuildDate><item><title><![CDATA[Primera clase]]></title><description><![CDATA[Tarea para la clase que viene: Crearse una cuenta en GitHub y en Mumuki. Para eso, lee este instructivo.
Hacer las lecciones 1, 2, 3 y 4 de‚Ä¶]]></description><link>https://pdep-lunes.github.io/bitacora/funcional/clase-01/</link><guid isPermaLink="false">https://pdep-lunes.github.io/bitacora/funcional/clase-01/</guid><pubDate>Mon, 06 Apr 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;tarea-para-la-clase-que-viene&quot;&gt;&lt;a href=&quot;#tarea-para-la-clase-que-viene&quot; aria-label=&quot;tarea para la clase que viene permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tarea para la clase que viene:&lt;/h2&gt;
&lt;p&gt;Crearse una cuenta en GitHub y en Mumuki. Para eso, lee este &lt;a href=&quot;https://docs.google.com/document/d/1qGLqYENZ9WYgRRh_Cbn3fczQd0jMSG1nLD_dDd8jWt4/edit&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;instructivo&lt;/a&gt;.
Hacer las lecciones 1, 2, 3 y 4 de &lt;a href=&quot;https://mumuki.io/pdep-utn&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Mumuki&lt;/a&gt;. En clase contestaremos las dudas que te hayan surgido al hacer el contenido.&lt;/p&gt;
&lt;h2 id=&quot;primero-un-poco-de-burocracia&quot;&gt;&lt;a href=&quot;#primero-un-poco-de-burocracia&quot; aria-label=&quot;primero un poco de burocracia permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Primero un poco de burocracia‚Ä¶&lt;/h2&gt;
&lt;p&gt;Dadas las circunstancias actuales debido a la pandemia üëëü¶†, esta cursada ser√°, en principio, virtual. Nuestro medio de comunicaci√≥n ser√° &lt;a href=&quot;https://discordapp.com/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;discord&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;La materia tiene 3Ô∏è‚É£ parciales.  &lt;/p&gt;
&lt;p&gt;¬øC√≥mo los promociono?
8 o m√°s en los 3 parciales (con la posibilidad de recuperar 1 si te sacaste menos de 8).
TPs aprobados.&lt;/p&gt;
&lt;p&gt;¬øC√≥mo simplemente los apruebo?
6 o m√°s en los 3 parciales (hay 2 recuperatorios por cada parcial).
TPs aprobados.&lt;/p&gt;
&lt;p&gt;¬øCu√°ndo y c√≥mo van a ser? Todav√≠a no sabemos. ¬°Paciencia! üôè&lt;/p&gt;
&lt;h2 id=&quot;los-temas-de-hoy&quot;&gt;&lt;a href=&quot;#los-temas-de-hoy&quot; aria-label=&quot;los temas de hoy permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Los temas de hoy&lt;/h2&gt;
&lt;p&gt;¬øQu√© es un paradigma de programaci√≥n?
Expresividad y declaratividad
Paradigma funcional&lt;/p&gt;
&lt;h2 id=&quot;¬øqu√©-es-un-paradigma-de-programaci√≥n&quot;&gt;&lt;a href=&quot;#%C2%BFqu%C3%A9-es-un-paradigma-de-programaci%C3%B3n&quot; aria-label=&quot;¬øqu√© es un paradigma de programaci√≥n permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;¬øQu√© es un paradigma de programaci√≥n?&lt;/h2&gt;
&lt;p&gt;Un paradigma es una forma en especial de pensar la soluci√≥n a un problema, en este caso, un problema de programaci√≥n üë©‚Äçüíªüë®‚Äçüíª. Para ello, vamos a necesitar herramientas üîß y conceptos üìñ que cambiar√°n de paradigma en paradigma. &lt;/p&gt;
&lt;p&gt;Los que veremos en la cursada ser√°n los paradigmas &lt;strong&gt;funcional&lt;/strong&gt;, &lt;strong&gt;l√≥gico&lt;/strong&gt; y &lt;strong&gt;de objetos&lt;/strong&gt; üòÆ. ¬°Empecemos!&lt;/p&gt;
&lt;h2 id=&quot;expresividad-y-declaratividad&quot;&gt;&lt;a href=&quot;#expresividad-y-declaratividad&quot; aria-label=&quot;expresividad y declaratividad permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Expresividad y declaratividad&lt;/h2&gt;
&lt;p&gt;Dos conceptos muy pero muy importantes que nos van a acompa√±ar tooodoo este a√±o. Son transversales a los 3 paradigmas.&lt;/p&gt;
&lt;p&gt;La &lt;strong&gt;expresividad&lt;/strong&gt; viene de la mano de cu√°n &lt;em&gt;entendible&lt;/em&gt; es nuestro c√≥digo. De c√≥mo nombramos a las variables, funciones, m√©todos‚Ä¶ Tiene que estar escrito de tal forma de que lo entiendas vos, tu colega o alguien que no sepa programaci√≥n tanto hoy como dentro de unos a√±os. &lt;/p&gt;
&lt;p&gt;La &lt;strong&gt;declaratividad&lt;/strong&gt; tiene que ver con ocultar los detalles algor√≠tmicos de nuestro c√≥digo. Enfocarnos en el &lt;em&gt;qu√© y no en el c√≥mo&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Estos dos conceptos son complementarios y vamos a buscar que nuestras soluciones sean lo m√°s declarativas y expresivas que podamos. No existe EL c√≥digo expresivo y declarativo, sino que existen c√≥digos m√°s declarativos y expresivos que otros. &lt;/p&gt;
&lt;p&gt;¬°Veamos unos ejemplos!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;-- Soluci√≥n A
‚Äã
int d(int c[]) {
  int a = 0;
  for (int b = 0; c[b] != NULL; b++) {
    if (c[b] % 2 == 0) {
      a++;
    }
  }
  return a;
}
‚Äã
-- Soluci√≥n B
‚Äã
int cantidadDeNumerosPares(int* unosNumeros) {
  int cantidadDePares = 0;
  for (int indice = 0;  != NULL; indice++) {
    if (unosNumeros[indice] % 2 == 0) {
      cantidadDePares++;
    }
  }
  return cantidadDePares;
}
‚Äã
-- Soluci√≥n C
‚Äã
int cantidadDeNumerosPares(int* unosNumeros) {
  int cantidadDePares = 0;
  for (int indice = 0;  != NULL; indice++) {
    if (esNumeroPar(unosNumeros[indice])) {
      cantidadDePares++;
    }
  }
  return cantidadDePares;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Dadas esas soluciones, ¬°compar√©moslas!&lt;/p&gt;
&lt;p&gt;La soluci√≥n A es menos expresiva que las otras dos, pero igual de declarativa que la B, aunque menos declarativa que la C.
La soluci√≥n B es m√°s expresiva que la A, e igual que la C, pero menos declarativa que la C, aunque igual de declarativa que la A.
La soluci√≥n C es la m√°s expresiva junto con la B y es la m√°s declarativa.&lt;/p&gt;
&lt;p&gt;No te asustes si no pudiste darte cuenta tan f√°cilmente qu√© soluci√≥n era m√°s expresiva o declarativa que la otra üò®. Es una habilidad que se va adquiriendo con la experiencia, as√≠ que ¬°a hacer muchos ejercicios! üí™üíª&lt;/p&gt;
&lt;h2 id=&quot;paradigma-funcional&quot;&gt;&lt;a href=&quot;#paradigma-funcional&quot; aria-label=&quot;paradigma funcional permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Paradigma funcional&lt;/h2&gt;
&lt;p&gt;Es el paradigma con el vamos a arrancar. Y trata sobre‚Ä¶ ¬°adivinaste! Funciones üòù. Y ac√° es donde hacemos esa gran pregunta tan temida en An√°lisis Matem√°tico: ¬øqu√© es una funci√≥n? üòÖ Es la relaci√≥n entre un dominio e imagen, en donde, para una entrada tenemos una salida (existencia) y esa salida es √∫nica (unicidad). Esta misma norma se va a cumplir para las &lt;em&gt;funciones&lt;/em&gt; que creemos en &lt;code class=&quot;language-text&quot;&gt;Haskell&lt;/code&gt;, el lenguaje correspondiente a este paradigma.&lt;/p&gt;
&lt;p&gt;‚ö†Ô∏è Antes de seguir, vamos a dejar algo en claro: &lt;strong&gt;nunca pero nunca vamos a usar un &lt;code class=&quot;language-text&quot;&gt;if&lt;/code&gt;para devolver un &lt;code class=&quot;language-text&quot;&gt;true&lt;/code&gt; o un &lt;code class=&quot;language-text&quot;&gt;false&lt;/code&gt;.&lt;/strong&gt; Es una muy mala pr√°ctica de programaci√≥n y quien la haga en un parcial tendr√° un 2 ü¶Ü.
‚ùå El c√≥digo que &lt;strong&gt;no&lt;/strong&gt; hay que hacer ser√≠a:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;esMayorDeEdad(unaEdad) {
	if (unaEdad &amp;gt;= 18) {
		return true
	} else {
		return false
	}
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;‚úîÔ∏è Lo correcto ser√≠a:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;esMayorDeEdad(unaEdad) {
	return unaEdad &amp;gt;= 18
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Dicho esto, adentr√©monos en Haskell. Estos son los ejemplos de funciones y valores que vimos en clase:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;triple&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;numero&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;numero&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;
‚Äã
&lt;span class=&quot;token hvariable&quot;&gt;esMayorDeEdad&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unaEdad&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unaEdad&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;18&lt;/span&gt;
‚Äã
&lt;span class=&quot;token hvariable&quot;&gt;frecuenciaCardiacaPromedio&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;80&lt;/span&gt;
‚Äã
&lt;span class=&quot;token hvariable&quot;&gt;hacerActividadFisica&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unaFrecuencia&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unaFrecuencia&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;
‚Äã
&lt;span class=&quot;token hvariable&quot;&gt;tieneTaquicardia&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unaFrecuencia&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unaFrecuencia&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;De esa forma le pusimos un alias o etiqueta al valor 80 con &lt;code class=&quot;language-text&quot;&gt;frecuenciaCardiacaPromedio&lt;/code&gt; y creamos funciones como &lt;code class=&quot;language-text&quot;&gt;triple&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;esMayorDeEdad&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;hacerActividadFisica&lt;/code&gt; y &lt;code class=&quot;language-text&quot;&gt;tieneTaquicardia&lt;/code&gt;.
Las funciones van a ser nuestras herramientas para poder operar a los valores.&lt;/p&gt;
&lt;p&gt;Algo muy importante es que en Haskell &lt;strong&gt;no hay efecto&lt;/strong&gt;. Esto quiere decir que los valores igualados no van a mutar luego de ser operados por las funciones. Este concepto se llama &lt;strong&gt;inmutabilidad&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Por ejemplo, si aplicamos &lt;code class=&quot;language-text&quot;&gt;hacerActividadFisica&lt;/code&gt; a la &lt;code class=&quot;language-text&quot;&gt;frecuenciaCardiacaPromedio&lt;/code&gt;, podemos ver que &lt;code class=&quot;language-text&quot;&gt;frecuenciaCardiacaPromedio&lt;/code&gt; no cambia su valor:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;frecuenciaCardiacaPromedio&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;80&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;hacerActividadFisica&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;frecuenciaCardiacaPromedio&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;130&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;frecuenciaCardiacaPromedio&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;80&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Por esto, es que en Haskell logramos tener lo que se llama &lt;strong&gt;transparencia referencial&lt;/strong&gt;. ü§Ø
Es importante recordar que &lt;code class=&quot;language-text&quot;&gt;frecuenciaCardiacaPromedio&lt;/code&gt; no es una variable, sino que es simplemente un alias, es decir, otra manera de decirle al valor 80.&lt;/p&gt;
&lt;p&gt;Ahora supongamos que queremos ver si tenemos taquicardia despu√©s de hacer actividad f√≠sica. ¬øC√≥mo lo resolvemos? üò± Usando &lt;strong&gt;composici√≥n&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;tieneTaquicardia&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;hacerActividadFisica&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;70&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;True&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;¬øQu√© lo qu√© est√° pasando? üò± Lo mismo que con la composici√≥n de funciones matem√°ticas ( FoG(x) ) ü§ì. Primero se aplica la funci√≥n de la derecha con el valor y luego se aplica la de la izquierda con el valor que nos devolvi√≥ la funci√≥n anterior.&lt;/p&gt;
&lt;p&gt;Recordemos que, como en matem√°tica, el valor que retorne la funci√≥n de la derecha, tiene que ser un valor que la funci√≥n de la izquierda pueda operar. Es decir, que la im√°gen de la funci√≥n de la derecha est√© inclu√≠da en el dominio de la funci√≥n de la izquierda.&lt;/p&gt;
&lt;p&gt;Si quisi√©ramos componerlo al rev√©s:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;hacerActividadFisica&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;tieneTaquicardia&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;70&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Va a romper üí• ya que &lt;code class=&quot;language-text&quot;&gt;hacerActividadFisica&lt;/code&gt; tiene que recibir un n√∫mero, y est√° recibiendo un booleano.&lt;/p&gt;
&lt;p&gt;Y ya que estamos, d√©mosle un nombre a la acci√≥n de preguntar si se tiene taquicardia luego de hacer una actividad f√≠sica. Lo haremos creando una nueva funci√≥n llamada &lt;code class=&quot;language-text&quot;&gt;tieneTaquicardiaDespuesDeEntrenar&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;tieneTaquicardiaDespuesDeEntrenar&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unaFrecuencia&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;tieneTaquicardia&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;hacerActividadFisica&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unaFrecuencia&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Y entonces, lo que nos queda despu√©s de componer dos funciones es‚Ä¶ ¬°una nueva funci√≥n! üòÆ&lt;/p&gt;
&lt;p&gt;Que no exista el estado en Haskell, hace que la composici√≥n tenga m√°s relevancia.
Ya que como no podemos pisar valores con variables, la composici√≥n nos permite encadenar las funciones para trabajar con diferentes valores y as√≠ poder crear soluciones m√°s complejas. ‚ú®&lt;/p&gt;
&lt;p&gt;Otro tema que vimos ya al final de la clase, en el canal de discord fue el de &lt;strong&gt;precedencia de operadores&lt;/strong&gt;.
En matem√°tica, cuando tenemos una expresi√≥n como 2 * 3 + 4, solemos operarla dependiendo de la precedencia de cada operador. Como el * es de mayor precedencia que el +, operamos primero 2 * 3 y luego le sumamos 4.&lt;/p&gt;
&lt;p&gt;En Haskell tambi√©n se respeta esto. Les dejamos una tabla para que puedan ver la precedencia que utiliza Haskell:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Precedencia (Mayor numero, mayor precedencia)&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;‚ÄúOperador‚Äù&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Aplicacion Normal de una Funcion&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;^&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;*,/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;+,-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;:&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;==, /=, &amp;#x3C;, &amp;#x3C;=, &gt;, &gt;=&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&amp;#x26;&amp;#x26;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;||&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;links-√∫tiles&quot;&gt;&lt;a href=&quot;#links-%C3%BAtiles&quot; aria-label=&quot;links √∫tiles permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Links √ötiles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://wiki.uqbar.org/wiki/articles/concepto-de-funcion.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Concepto de funci√≥n&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://wiki.uqbar.org/wiki/articles/composicion.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Composici√≥n&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item></channel></rss>